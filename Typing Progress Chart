import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const TypingProgressChart = () => {
  // Get data from localStorage
  const getStoredData = () => {
    try {
      const storedData = localStorage.getItem('typingProgress');
      return storedData ? JSON.parse(storedData) : null;
    } catch (error) {
      console.error('Error loading progress data:', error);
      return null;
    }
  };

  // Initial state with sample data as fallback
  const [progressData, setProgressData] = useState(() => {
    const storedData = getStoredData();
    return storedData || [
      { date: '2023-03-01', wpm: 35, accuracy: 92, mode: 'all' },
      { date: '2023-03-02', wpm: 38, accuracy: 93, mode: 'leftHand' },
      { date: '2023-03-03', wpm: 42, accuracy: 91, mode: 'rightHand' },
      { date: '2023-03-04', wpm: 40, accuracy: 94, mode: 'homeRow' },
      { date: '2023-03-05', wpm: 45, accuracy: 95, mode: 'all' },
      { date: '2023-03-06', wpm: 48, accuracy: 93, mode: 'all' },
      { date: '2023-03-07', wpm: 52, accuracy: 96, mode: 'all' },
    ];
  });

  const [chartData, setChartData] = useState([]);
  const [activeMetric, setActiveMetric] = useState('wpm');
  const [activeMode, setActiveMode] = useState('all');
  
  // List of available modes from the data
  const [availableModes, setAvailableModes] = useState(['all']);

  useEffect(() => {
    // Format the dates for display and get available modes
    const formattedData = progressData.map(entry => ({
      ...entry,
      displayDate: new Date(entry.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
    }));
    
    // Extract unique modes
    const modes = [...new Set(progressData.map(entry => entry.mode || 'all'))];
    setAvailableModes(modes);
    
    // Filter by selected mode if applicable
    const filteredData = activeMode === 'all' 
      ? formattedData 
      : formattedData.filter(entry => entry.mode === activeMode);
    
    setChartData(filteredData);
  }, [progressData, activeMode]);

  // Add a new record (simulating after a test completion)
  const addNewRecord = () => {
    // Get WPM and accuracy from most recent test of the same mode
    const lastEntry = progressData.filter(entry => entry.mode === activeMode).pop() || progressData[progressData.length - 1];
    const lastWpm = lastEntry.wpm;
    const lastAccuracy = lastEntry.accuracy;
    
    // Generate a random improvement (or decline)
    const wpmChange = Math.floor(Math.random() * 10) - 3; // -3 to +7
    const accuracyChange = Math.floor(Math.random() * 6) - 2; // -2 to +4
    
    const today = new Date();
    const newRecord = {
      date: today.toISOString().split('T')[0],
      wpm: Math.max(25, lastWpm + wpmChange),
      accuracy: Math.min(100, Math.max(70, lastAccuracy + accuracyChange)),
      mode: activeMode
    };
    
    const updatedData = [...progressData, newRecord];
    setProgressData(updatedData);
    
    // Save to localStorage
    try {
      localStorage.setItem('typingProgress', JSON.stringify(updatedData));
    } catch (error) {
      console.error('Error saving progress data:', error);
    }
  };

  // Get color for different modes
  const getModeColor = (mode) => {
    const colors = {
      'all': '#e2b714',
      'leftHand': '#ff6b6b',
      'rightHand': '#57c4e5',
      'homeRow': '#9ee493',
      'topRow': '#ba68c8',
      'bottomRow': '#ff9e7d',
      'leftPinky': '#ff6b6b',
      'leftRing': '#ff9e7d',
      'leftMiddle': '#ffda83',
      'leftIndex': '#9ee493',
      'rightIndex': '#57c4e5',
      'rightMiddle': '#7986cb',
      'rightRing': '#ba68c8',
      'rightPinky': '#f06292'
    };
    
    return colors[mode] || '#e2b714';
  };

  return (
    <div className="bg-gray-800 p-6 rounded-lg shadow-lg text-white">
      <div className="mb-4 flex flex-col md:flex-row justify-between items-center">
        <h2 className="text-xl font-bold text-yellow-400 mb-2 md:mb-0">Typing Progress Chart</h2>
        
        <div className="flex flex-wrap gap-2">
          <div className="flex gap-2 mr-4">
            <button 
              className={`px-3 py-1 rounded ${activeMetric === 'wpm' ? 'bg-yellow-600' : 'bg-gray-700'}`}
              onClick={() => setActiveMetric('wpm')}
            >
              WPM
            </button>
            <button 
              className={`px-3 py-1 rounded ${activeMetric === 'accuracy' ? 'bg-yellow-600' : 'bg-gray-700'}`}
              onClick={() => setActiveMetric('accuracy')}
            >
              Accuracy
            </button>
          </div>
          
          <select 
            className="bg-gray-700 text-white px-3 py-1 rounded"
            value={activeMode}
            onChange={(e) => setActiveMode(e.target.value)}
          >
            <option value="all">All Modes</option>
            {availableModes.map(mode => (
              mode !== 'all' && <option key={mode} value={mode}>{mode.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="h-64 w-full">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={chartData}
            margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="#444" />
            <XAxis 
              dataKey="displayDate" 
              stroke="#aaa" 
              tick={{ fill: '#aaa' }} 
            />
            <YAxis 
              stroke="#aaa"
              tick={{ fill: '#aaa' }}
              domain={activeMetric === 'wpm' ? [0, 'auto'] : [50, 100]}
            />
            <Tooltip 
              contentStyle={{ backgroundColor: '#333', border: '1px solid #555' }}
              formatter={(value, name, props) => {
                // Display more info in tooltip
                const entry = props.payload;
                return [
                  `${value} ${activeMetric === 'wpm' ? 'WPM' : '%'}`,
                  entry.mode ? entry.mode.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()) : 'All'
                ];
              }}
            />
            <Legend />
            {activeMetric === 'wpm' ? (
              <Line 
                type="monotone" 
                dataKey="wpm" 
                name="WPM" 
                stroke={activeMode === 'all' ? '#e2b714' : getModeColor(activeMode)} 
                activeDot={{ r: 8 }}
                strokeWidth={2}
              />
            ) : (
              <Line 
                type="monotone" 
                dataKey="accuracy" 
                name="Accuracy %" 
                stroke={activeMode === 'all' ? '#4ade80' : getModeColor(activeMode)} 
                activeDot={{ r: 8 }}
                strokeWidth={2}
              />
            )}
          </LineChart>
        </ResponsiveContainer>
      </div>

      <div className="mt-4 flex justify-center">
        <button 
          onClick={addNewRecord}
          className="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 rounded font-medium"
        >
          Save Current Test Result
        </button>
      </div>
      
      <div className="mt-4 text-sm text-gray-400 text-center">
        Track your progress over time. Results are stored locally in your browser.
      </div>
    </div>
  );
};

export default TypingProgressChart;
